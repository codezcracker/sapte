"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var preact8_rst_1 = require("./preact8-rst");
var preact10_rst_1 = require("./preact10-rst");
var util_1 = require("./util");
var compat_1 = require("./compat");
var preact10_internals_1 = require("./preact10-internals");
var debounce_render_hook_1 = require("./debounce-render-hook");
var testUtils;
if (util_1.isPreact10()) {
    // nb. We require the whole module here rather than just getting a reference
    // to the `act` function because `act` is patched in `debounce-render-hook`.
    testUtils = require('preact/test-utils');
}
/**
 * Invoke `callback` and then immediately flush any effects or pending renders
 * which were scheduled during the callback.
 */
function act(callback) {
    if (testUtils) {
        testUtils.act(callback);
    }
    else {
        callback();
    }
}
var MountRenderer = /** @class */ (function () {
    function MountRenderer(_a) {
        var container = (_a === void 0 ? {} : _a).container;
        debounce_render_hook_1.installHook();
        this._container = container || document.createElement('div');
        if (util_1.isPreact10()) {
            this._getNode = preact10_rst_1.getNode;
        }
        else {
            this._getNode = preact8_rst_1.getNode;
        }
    }
    MountRenderer.prototype.render = function (el, context, callback) {
        var _this = this;
        act(function () {
            compat_1.render(el, _this._container);
        });
        if (callback) {
            callback();
        }
    };
    MountRenderer.prototype.unmount = function () {
        // A custom tag name is used here to work around
        // https://github.com/developit/preact/issues/1288.
        compat_1.render(preact_1.h('unmount-me', {}), this._container);
        this._container.innerHTML = '';
    };
    MountRenderer.prototype.getNode = function () {
        debounce_render_hook_1.flushRenders();
        var container = this._container;
        if (
        // Preact 8 requires DOM nodes to represent any rendered content.
        container.childNodes.length === 0 &&
            // If the root component rendered null in Preact 10 then the only
            // indicator that content has been rendered will be metadata attached to
            // the container.
            typeof preact10_internals_1.getLastVNodeRenderedIntoContainer(container) === 'undefined') {
            return null;
        }
        return this._getNode(this._container);
    };
    MountRenderer.prototype.simulateError = function (nodeHierarchy, rootNode, error) {
        var errNode = nodeHierarchy[0];
        var render = function () {
            // Modify the stack to match where the error is thrown. This makes
            // debugging easier.
            error.stack = new Error().stack;
            throw error;
        };
        util_1.withReplacedMethod(errNode.instance, 'render', render, function () {
            act(function () {
                errNode.instance.forceUpdate();
            });
        });
    };
    MountRenderer.prototype.simulateEvent = function (node, eventName, args) {
        if (args === void 0) { args = {}; }
        if (node.nodeType !== 'host') {
            var name_1 = util_1.getDisplayName(node);
            throw new Error("Cannot simulate event on \"" + name_1 + "\" which is not a DOM element. " +
                'Find a DOM element in the output and simulate an event on that.');
        }
        // To be more faithful to a real browser, this should use the appropriate
        // constructor for the event type. This implementation is good enough for
        // many components though.
        var bubbles = args.bubbles, composed = args.composed, cancelable = args.cancelable, extra = __rest(args, ["bubbles", "composed", "cancelable"]);
        var event = new Event(eventName, {
            bubbles: bubbles,
            composed: composed,
            cancelable: cancelable,
        });
        Object.assign(event, extra);
        act(function () {
            node.instance.dispatchEvent(event);
        });
    };
    MountRenderer.prototype.batchedUpdates = function (fn) {
        fn();
    };
    MountRenderer.prototype.container = function () {
        return this._container;
    };
    return MountRenderer;
}());
exports.default = MountRenderer;
