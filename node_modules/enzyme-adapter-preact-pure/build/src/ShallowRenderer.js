"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var MountRenderer_1 = __importDefault(require("./MountRenderer"));
var shallow_render_utils_1 = require("./shallow-render-utils");
var compat_1 = require("./compat");
var ShallowRenderer = /** @class */ (function () {
    function ShallowRenderer() {
        this._mountRenderer = new MountRenderer_1.default();
    }
    ShallowRenderer.prototype.render = function (el, context, options) {
        var _this = this;
        // Make all elements in the input tree, except for the root element, render
        // to a stub.
        compat_1.childElements(el).forEach(function (el) {
            if (el != null && typeof el !== 'string') {
                shallow_render_utils_1.shallowRenderVNodeTree(el);
            }
        });
        // Make any new elements rendered by the root element render to a stub.
        shallow_render_utils_1.withShallowRendering(function () {
            _this._mountRenderer.render(el, context);
            var rootNode = _this._mountRenderer.getNode();
            if (rootNode.type === 'host') {
                return;
            }
            // Monkey-patch the component's `render` to make it shallow-render.
            var instance = rootNode.instance;
            var originalRender = instance.render;
            instance.render = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var result;
                shallow_render_utils_1.withShallowRendering(function () {
                    result = originalRender.call.apply(originalRender, __spreadArrays([_this], args));
                });
                return result;
            };
            // Monkey-patch `componentDidMount` to prevent it being called a second
            // time after `render` returns. React's shallow renderer does not
            // invoke lifecycle methods so Enzyme tries to invoke them manually. This
            // is not necessary for the Preact adapter because shallow rendering
            // works the same as normal rendering.
            instance.componentDidMount = function () { };
        });
    };
    ShallowRenderer.prototype.simulateError = function (nodeHierarchy, rootNode, error) {
        var _this = this;
        shallow_render_utils_1.withShallowRendering(function () {
            _this._mountRenderer.simulateError(nodeHierarchy, rootNode, error);
        });
    };
    ShallowRenderer.prototype.simulateEvent = function (node, eventName, args) {
        var _this = this;
        shallow_render_utils_1.withShallowRendering(function () {
            _this._mountRenderer.simulateEvent(node, eventName, args);
        });
    };
    ShallowRenderer.prototype.unmount = function () {
        this._mountRenderer.unmount();
    };
    ShallowRenderer.prototype.getNode = function () {
        return this._mountRenderer.getNode();
    };
    ShallowRenderer.prototype.batchedUpdates = function (fn) {
        fn();
    };
    return ShallowRenderer;
}());
exports.default = ShallowRenderer;
