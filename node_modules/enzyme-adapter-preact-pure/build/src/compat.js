"use strict";
/**
 * Helper functions to enable this library to work with different versions of
 * Preact.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.childElements = exports.render = exports.componentForDOMNode = exports.addTypeAndPropsToVNode = void 0;
var preact_1 = require("preact");
var preact10_internals_1 = require("./preact10-internals");
var preact8_internals_1 = require("./preact8-internals");
var util_1 = require("./util");
/**
 * Add `type` and  `props` properties to Preact elements as aliases of
 * `nodeName` and `attributes`.
 *
 * This only applies to older versions of Preact. Preact 10 uses the
 * names `type` and `props` already.
 *
 * This normalizes VNodes across different versions of Preact and also Enzyme
 * internally depends on the node type and properties object being exposed
 * under these names.
 */
function addTypeAndPropsToVNode() {
    // nb. VNodes are class instances in Preact <= 8 but object literals in
    // Preact 10.
    if ('type' in preact_1.h('div', {})) {
        // Extra properties have already been added.
        return;
    }
    // We could add these properties using a VNode hook, but since older versions
    // of Preact use a class for VNodes, we can also add accessors on the
    // prototype.
    var VNode = preact_1.h('div', {}).constructor;
    Object.defineProperty(VNode.prototype, 'type', {
        get: function () {
            return this.nodeName;
        },
        set: function (val) {
            this.nodeName = val;
        },
        configurable: true,
    });
    Object.defineProperty(VNode.prototype, 'props', {
        get: function () {
            return this.attributes || {};
        },
        configurable: true,
    });
}
exports.addTypeAndPropsToVNode = addTypeAndPropsToVNode;
/**
 * Search a tree of Preact v10 VNodes for the one that produced a given DOM element.
 */
function findVNodeForDOM(vnode, el, filter) {
    if (preact10_internals_1.getDOMNode(vnode) === el && filter(vnode)) {
        return vnode;
    }
    // Test children of this vnode.
    var children = preact10_internals_1.getChildren(vnode);
    if (children) {
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var child = children_1[_i];
            if (typeof child === 'string') {
                continue;
            }
            var match = findVNodeForDOM(child, el, filter);
            if (match) {
                return match;
            }
        }
    }
    return null;
}
/**
 * Find the `Component` instance that produced a given DOM node.
 */
function componentForDOMNode(el) {
    // In Preact 8 this is easy, as rendered nodes have `_component` expando
    // property.
    if (!util_1.isPreact10()) {
        return preact8_internals_1.componentForNode(el);
    }
    // In Preact 10 we have to search up the tree until we find the container
    // that the root vnode was rendered into, then traverse the vnode tree to
    // find the component vnode that produced the DOM element.
    var parentEl = el.parentNode;
    var rootVNode = null;
    while (parentEl && !rootVNode) {
        rootVNode = preact10_internals_1.getLastVNodeRenderedIntoContainer(parentEl);
        parentEl = parentEl.parentNode;
    }
    if (rootVNode) {
        var vnode = findVNodeForDOM(rootVNode, el, function (v) { return v.type !== preact_1.Fragment; });
        if (vnode) {
            return preact10_internals_1.getComponent(vnode);
        }
    }
    return null;
}
exports.componentForDOMNode = componentForDOMNode;
function render(el, container) {
    if (util_1.isPreact10()) {
        preact_1.render(el, container);
    }
    else {
        var preact8Render = preact_1.render;
        preact8Render(el, container, container.firstChild);
    }
}
exports.render = render;
/**
 * Return the children of a VNode.
 */
function childElements(el) {
    if (util_1.isPreact10()) {
        if (typeof el.props !== 'object' || el.props == null) {
            return [];
        }
        if (typeof el.props.children !== 'undefined') {
            return util_1.toArray(el.props.children);
        }
    }
    else {
        if (typeof el.children !== 'undefined') {
            return el.children;
        }
    }
    return [];
}
exports.childElements = childElements;
