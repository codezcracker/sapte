"use strict";
/**
 * Functions for rendering components using Preact "classic" (v9 and below)
 * and converting the result to a React Standard Tree (RST) format defined by
 * Enzyme.
 *
 * Preact <= 8 stores details of the rendered elements on the DOM nodes
 * themselves and updates diff VDOM elements against the DOM. The rendered
 * result is converted to RST by traversing the DOM and Preact-internal
 * metadata attached to DOM nodes.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rstNodeFromElement = exports.getNode = void 0;
var preact8_internals_1 = require("./preact8-internals");
var compat_1 = require("./compat");
var shallow_render_utils_1 = require("./shallow-render-utils");
/**
 * Return a React Standard Tree (RST) node from a DOM element which might
 * be the root output of a rendered component.
 */
function rstNodeFromDOMElementOrComponent(domElement) {
    var component = preact8_internals_1.componentForNode(domElement);
    if (component) {
        return rstNodeFromComponent(component);
    }
    else {
        return rstNodeFromDOMElement(domElement);
    }
}
function rstNodesFromDOMNodes(nodes) {
    return nodes
        .map(function (node) {
        switch (node.nodeType) {
            case Node.ELEMENT_NODE:
                return rstNodeFromDOMElementOrComponent(node);
            case Node.TEXT_NODE:
                return node.nodeValue;
            default:
                return null;
        }
    })
        .filter(function (node) { return node !== null; });
}
/**
 * Return a React Standard Tree (RST) node from a host (DOM) element.
 */
function rstNodeFromDOMElement(domElement) {
    var hostProps = preact8_internals_1.propsForNode(domElement);
    var key = 'key' in hostProps ? hostProps.key : null;
    var ref = 'ref' in hostProps ? hostProps.ref : null;
    return {
        nodeType: 'host',
        type: domElement.nodeName.toLowerCase(),
        props: convertDOMProps(hostProps),
        key: key,
        ref: ref,
        instance: domElement,
        rendered: rstNodesFromDOMNodes(Array.from(domElement.childNodes)),
    };
}
/**
 * Return a React Standard Tree (RST) node from a Preact `Component` instance.
 */
function rstNodeFromComponent(component) {
    var nodeType;
    try {
        if (component instanceof component.constructor) {
            // Component was created with `new ComponentSubclass`.
            nodeType = 'class';
        }
        else {
            // Component was created using `new Component`. Preact sets the constructor
            // to the component function but component isn't really an instance of
            // that function.
            nodeType = 'function';
        }
    }
    catch (_a) {
        // The `instanceof` check above can throw if `component.constructor` is an
        // arrow function.
        nodeType = 'function';
    }
    var rendered;
    if (component._component) {
        // This component rendered another component.
        rendered = [rstNodeFromComponent(component._component)];
    }
    else {
        // This component rendered a host node.
        var hostNode = component.base;
        if (hostNode.nodeType === Node.ELEMENT_NODE) {
            rendered = [rstNodeFromDOMElement(component.base)];
        }
        else {
            var text = hostNode.textContent;
            // Preact <= 8 renders `null` as an empty text node. If the node is empty,
            // it is more likely that the component rendered `null` than an empty
            // string.
            if (text !== '') {
                rendered = [text];
            }
            else {
                rendered = [];
            }
        }
    }
    // If this was a shallow-rendered component, set the RST node's type to the
    // real component function/class.
    var shallowRenderedType = shallow_render_utils_1.getRealType(component);
    if (shallowRenderedType) {
        // Shallow rendering replaces the output of the component with a dummy
        // DOM element. Remove this dummy from the RST so that Enzyme does not see
        // it.
        rendered = rendered[0].rendered;
    }
    var type = shallowRenderedType ? shallowRenderedType : component.constructor;
    // Work around preact-compat setting the `displayName` of SFC wrapper
    // components incorrectly if they do not have a `displayName` property.
    if (type.name === 'cl' && !type.displayName) {
        type.displayName = type.prototype.displayName;
    }
    return {
        nodeType: nodeType,
        type: type,
        props: component.props,
        key: preact8_internals_1.componentKey(component) || null,
        ref: preact8_internals_1.componentRef(component) || null,
        instance: component,
        rendered: rendered,
    };
}
/**
 * Convert the Preact components rendered into `container` into an RST node.
 */
function getNode(container) {
    return rstNodeFromDOMElementOrComponent(container.firstChild);
}
exports.getNode = getNode;
function nodeTypeFromType(type) {
    if (typeof type === 'string') {
        return 'host';
    }
    else if (type.prototype && typeof type.prototype.render === 'function') {
        return 'class';
    }
    else if (typeof type === 'function') {
        return 'function';
    }
    else {
        throw new Error("Unknown node type: " + type);
    }
}
function convertDOMProps(props) {
    var converted = {};
    Object.keys(props).forEach(function (srcProp) {
        if (srcProp === 'children' || srcProp === 'key' || srcProp === 'ref') {
            return;
        }
        var destProp = srcProp === 'class' ? 'className' : srcProp;
        converted[destProp] = props[srcProp];
    });
    return converted;
}
function stripSpecialProps(props) {
    var children = props.children, key = props.key, ref = props.ref, otherProps = __rest(props, ["children", "key", "ref"]);
    return otherProps;
}
/**
 * Convert a JSX element tree returned by Preact's `h` function into an RST
 * node.
 */
function rstNodeFromElement(node) {
    if (node == null || typeof node === 'string') {
        return node;
    }
    var children = compat_1.childElements(node).map(rstNodeFromElement);
    var nodeType = nodeTypeFromType(node.type);
    var props = {};
    if (typeof node.props === 'object' && node.props) {
        props =
            nodeType === 'host'
                ? convertDOMProps(node.props)
                : stripSpecialProps(node.props);
    }
    return {
        nodeType: nodeType,
        type: node.type,
        props: props,
        key: node.key || null,
        ref: (node.props && node.props.ref) || null,
        instance: null,
        rendered: children,
    };
}
exports.rstNodeFromElement = rstNodeFromElement;
