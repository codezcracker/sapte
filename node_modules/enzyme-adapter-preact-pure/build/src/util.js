"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toArray = exports.withReplacedMethod = exports.getDisplayName = exports.nodeType = exports.isPreact10 = exports.getType = void 0;
var preact_1 = require("preact");
var preact10_internals_1 = require("./preact10-internals");
function getType(obj) {
    if (obj == null) {
        return String(obj);
    }
    return obj.constructor.name;
}
exports.getType = getType;
function isPreact10() {
    var vnode = preact_1.h('div', {});
    return typeof preact10_internals_1.getComponent(vnode) !== 'undefined';
}
exports.isPreact10 = isPreact10;
/**
 * Return the type of a vnode as a string.
 */
function nodeType(vnode) {
    if (!vnode.type) {
        return 'null';
    }
    return typeof vnode.type === 'string' ? vnode.type : vnode.type.name;
}
exports.nodeType = nodeType;
function getDisplayName(node) {
    if (node.nodeType === 'host') {
        return node.type;
    }
    else {
        var type = node.type;
        return type.displayName || type.name;
    }
}
exports.getDisplayName = getDisplayName;
/**
 * Call `fn` with a method on an object temporarily replaced with `methodImpl`.
 */
function withReplacedMethod(obj, method, methodImpl, fn) {
    var hadOwnMethod = obj.hasOwnProperty(method);
    var origMethod = obj[method];
    if (typeof origMethod !== 'function') {
        throw new Error("Expected '" + method + "' property to be a function");
    }
    obj[method] = methodImpl;
    try {
        fn();
    }
    finally {
        if (hadOwnMethod) {
            obj[method] = origMethod;
        }
        else {
            delete obj[method];
        }
    }
}
exports.withReplacedMethod = withReplacedMethod;
function toArray(obj) {
    return Array.isArray(obj) ? obj : [obj];
}
exports.toArray = toArray;
